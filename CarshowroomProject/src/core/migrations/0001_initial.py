# Generated by Django 4.0 on 2022-07-13 10:53

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone
import src.core.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CarModel',
            fields=[
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('brand', models.CharField(choices=[('audi', 'Audi'), ('Hyundai', 'Hyundai'), ('Nissan', 'Nissan'), ('Suzuki', 'Suzuki'), ('BMW', 'BMW'), ('Kia', 'Kia'), ('Opel', 'Opel'), ('Toyota', 'Toyota')], max_length=30)),
                ('body_type', models.CharField(choices=[('sedan', 'SEDAN'), ('coupe', 'COUPE'), ('sport car', 'SPORT_CAR'), ('station vagon', 'STATION_VAGON'), ('hatchback', 'HATCHBACK'), ('convertible', 'CONVERTIBLE'), ('minivan', 'MINIVAN'), ('pickup truck', 'PICKUP_TRACK'), ('crossover', 'CROSSOVER')], max_length=30)),
                ('issue_year', models.IntegerField()),
                ('model', models.CharField(max_length=40)),
                ('fuel_type', models.CharField(choices=[('petrol', 'petrol'), ('disel', 'disel'), ('CNG', 'CNG'), ('bio disel', 'bio_disel'), ('electric', 'electric')], default=src.core.models.FuelTypes['disel'], max_length=50)),
                ('mileage', models.IntegerField(default=0)),
            ],
            options={
                'db_table': 'car',
            },
        ),
        migrations.CreateModel(
            name='BaseUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email_is_confirmed', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
